name: Deploy Spring Boot with Docker to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Check build directory
        run: ls -l build/libs/

      - name: Debug Current Directory and Build Files
        run: |
          echo "📂 현재 작업 디렉토리:"
          pwd
          echo "📂 프로젝트 내 파일 목록:"
          ls -l
          echo "📂 build/libs/ 폴더 확인:"
          ls -l build/libs/ || echo "❌ build/libs/ 폴더가 없습니다!"

      - name: Build JAR with Gradle (Force bootJar)
        run: ./gradlew bootJar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        working-directory: ${{ github.workspace }}
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/inkstone:latest -f Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/inkstone:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Debug SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r'

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "echo '✅ EC2 SSH 연결 성공'"

      - name: Connect to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🔍 기존 inkstone 컨테이너 확인..."
            if [ $(sudo docker ps -q -f name=inkstone) ]; then
              echo "🛑 기존 컨테이너 중지 중..."
              sudo docker stop inkstone
              sudo docker rm inkstone
            else
              echo "✅ 실행 중인 컨테이너가 없습니다."
            fi

            echo "📥 최신 Docker 이미지 다운로드..."
            sudo docker pull --quiet ${{ secrets.DOCKER_USERNAME }}/inkstone:latest

            echo "🚀 새로운 컨테이너 실행 중..."
            sudo docker run -d --restart always --log-opt max-size=10m --log-opt max-file=3 \
              -p ${{ secrets.EC2_INKSTONE_PORT }}:${{ secrets.EC2_INKSTONE_PORT }} --name inkstone ${{ secrets.DOCKER_USERNAME }}/inkstone:latest

            echo "🔍 배포된 컨테이너 상태 확인..."
            sudo docker ps -a | grep inkstone

            echo "🔍 애플리케이션 헬스 체크..."
            sleep 5
            curl -X GET http://${{ secrets.EC2_HOST }}:${{ secrets.EC2_INKSTONE_PORT }}/health || echo "❌ 헬스 체크 실패!"